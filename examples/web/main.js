/* NOTICE: this file was automatically generated by https://github.com/khimaros/enc using the following invocation: enc main.en -o main.js --context-files styles.css */

'use strict';

document.addEventListener('DOMContentLoaded', () => {
  // this javascript handles toggling light and dark mode
  const setupThemeToggler = () => {
    const darkThemeOverrides = {
      '--bg-color': '#2d3748' /* Dark Slate Gray */,
      '--text-color': '#e2e8f0' /* Light Gray */,
      '--subtle-border': '#4a5568' /* Gray */,
    };

    const lightThemeOverrides = {
      '--bg-color': '#f8f8ff' /* Ghost White */,
      '--text-color': '#363636' /* Dark Gray */,
      '--subtle-border': '#e0e0e0' /* Light Gray */,
    };

    const applyTheme = (theme) => {
      const root = document.documentElement;
      for (const [property, value] of Object.entries(theme)) {
        root.style.setProperty(property, value);
      }
    };

    const toggleButton = document.createElement('button');
    toggleButton.textContent = 'Toggle Theme';
    Object.assign(toggleButton.style, {
      position: 'fixed',
      top: '20px',
      right: '20px',
      padding: '10px 15px',
      backgroundColor: 'var(--primary-color)',
      color: 'var(--bg-color)',
      border: 'none',
      borderRadius: '5px',
      cursor: 'pointer',
      zIndex: '10000',
    });
    document.body.appendChild(toggleButton);

    let isManuallySetToDark =
      window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: dark)').matches;

    // Set initial state for JS control if needed, but rely on CSS media query for initial render.
    if (isManuallySetToDark) {
        applyTheme(darkThemeOverrides);
    } else {
        applyTheme(lightThemeOverrides);
    }


    toggleButton.addEventListener('click', () => {
      isManuallySetToDark = !isManuallySetToDark;
      if (isManuallySetToDark) {
        applyTheme(darkThemeOverrides);
      } else {
        applyTheme(lightThemeOverrides);
      }
    });
  };

  // there are also some small things floating around on the screen
  const createFloatingThings = () => {
    const styleSheet = document.createElement('style');
    styleSheet.textContent = `
      .floating-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        overflow: hidden;
        z-index: 9999;
      }
      .floater {
        position: absolute;
        border-radius: 50%;
        opacity: 0.5;
        animation: floatAnimation 25s infinite linear;
      }
      @keyframes floatAnimation {
        0% {
          transform: translateY(105vh) translateX(0);
        }
        100% {
          transform: translateY(-10vh) translateX(var(--drift, 0px));
        }
      }
    `;
    document.head.appendChild(styleSheet);

    const container = document.createElement('div');
    container.className = 'floating-container';
    document.body.appendChild(container);

    const colors = [
      '#a2d2ff' /* Pastel Blue */,
      '#ffc8dd' /* Pastel Pink */,
      '#bde0fe' /* Lighter Pastel Blue */,
      '#c8e6c9' /* Pastel Green */,
      '#fff59d' /* Pastel Yellow */,
    ];
    const particleCount = 30;

    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.className = 'floater';

      const size = Math.random() * 15 + 5; // Size between 5px and 20px
      const startX = Math.random() * 100; // Starting horizontal position in vw
      const animDuration = Math.random() * 20 + 15; // Animation duration between 15s and 35s
      const animDelay = Math.random() * -35; // Start animation at a random point
      const drift = (Math.random() - 0.5) * 300; // Horizontal drift
      const color = colors[Math.floor(Math.random() * colors.length)];

      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      particle.style.left = `${startX}vw`;
      particle.style.bottom = '0'; // Start from bottom
      particle.style.backgroundColor = color;
      particle.style.animationDuration = `${animDuration}s`;
      particle.style.animationDelay = `${animDelay}s`;
      particle.style.setProperty('--drift', `${drift}px`);

      container.appendChild(particle);
    }
  };

  setupThemeToggler();
  createFloatingThings();
});
