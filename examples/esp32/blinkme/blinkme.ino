// NOTICE: this file was automatically generated by https://github.com/khimaros/enc
// using the following invocation:
// enc main.en -o blinkme/blinkme.ino

// the LED on pin D2 will blink on and off at 2hz
#define LED_PIN 2
#define BLINK_INTERVAL_MS 250 // 2Hz cycle = 500ms period. Toggle every 250ms.

// the BOOT button on GPIO0 will toggle the blinking
#define BUTTON_PIN 0
#define DEBOUNCE_DELAY_MS 50

// Global state variables
// default to on
bool g_blinking_enabled = true;
bool g_led_state = LOW;
unsigned long g_last_blink_time = 0;

// Button state tracking for debouncing
int g_last_button_state = HIGH;
unsigned long g_last_press_time = 0;

// this is a firmware for an esp32 device
void setup() {
  // serial console will log
  Serial.begin(115200);

  pinMode(LED_PIN, OUTPUT);
  // The BOOT button on GPIO0 has an external pull-up resistor.
  // Using INPUT_PULLUP is safe and good practice.
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  // serial console will log when the blinking is toggled
  Serial.println("Firmware started. Blinking is ON.");
}

void loop() {
  // the BOOT button on GPIO0 will toggle the blinking
  int current_button_state = digitalRead(BUTTON_PIN);

  // Check for a falling edge (press) and debounce it.
  if (current_button_state == LOW && g_last_button_state == HIGH) {
    if (millis() - g_last_press_time > DEBOUNCE_DELAY_MS) {
      g_blinking_enabled = !g_blinking_enabled;
      g_last_press_time = millis();

      // serial console will log when the blinking is toggled
      Serial.print("Blinking toggled: ");
      Serial.println(g_blinking_enabled ? "ON" : "OFF");
    }
  }
  g_last_button_state = current_button_state;

  // the LED on pin D2 will blink on and off at 2hz
  if (g_blinking_enabled) {
    unsigned long current_time = millis();
    if (current_time - g_last_blink_time >= BLINK_INTERVAL_MS) {
      g_last_blink_time = current_time;
      g_led_state = !g_led_state;
      digitalWrite(LED_PIN, g_led_state);

      // serial console will log ... each time the LED state changes
      Serial.println(g_led_state ? "LED ON" : "LED OFF");
    }
  } else {
    // If blinking is disabled, ensure the LED is turned off.
    // Also reset the state so the next blink cycle starts predictably.
    if (g_led_state == HIGH) {
      g_led_state = LOW;
      digitalWrite(LED_PIN, g_led_state);
    }
  }
}