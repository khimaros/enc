this script downloads and converts pricing data from aider

the source url is: https://raw.githubusercontent.com/Aider-AI/aider/refs/heads/main/aider/resources/model-metadata.json

with python, json5 should be used to parse the source data.

the base JSON is an object and the keys are of the form "<provider>/<model>"

each key of that form has a value of which is an object.

those objects have many keys, but will be filtered to have only the following ones:

- max_tokens
- max_input_tokens
- input_cost_per_token
- input_cost_per_token_above_200k_tokens
- output_cost_per_token
- output_cost_per_token_above_200k_tokens
- source

where provider is "gemini", it will be replaced with "google"

if no provider is specified, that entire object should be skipped.

if there is an extra "openrouter/" prefix, it should be removed.

the source data looks like:

```json
{
    "gemini/gemini-2.5-pro": {
        "max_tokens": 65536,
        "max_input_tokens": 1048576,
        "max_output_tokens": 65536,
        "max_images_per_prompt": 3000,
        "max_videos_per_prompt": 10,
        "max_video_length": 1,
        "max_audio_length_hours": 8.4,
        "max_audio_per_prompt": 1,
        "max_pdf_size_mb": 20,
        "input_cost_per_token": 0.00000125,
        "input_cost_per_token_above_200k_tokens": 0.0000025,
        "output_cost_per_token": 0.00001,
        "output_cost_per_token_above_200k_tokens": 0.000015,
        "litellm_provider": "gemini",
        "mode": "chat",
        "rpm": 2000,
        "tpm": 8000000,
        "supports_system_messages": true,
        "supports_function_calling": true,
        "supports_vision": true,
        "supports_response_schema": true,
        "supports_audio_output": false,
        "supports_tool_choice": true,
        "supported_modalities": ["text", "image", "audio", "video"],
        "supported_output_modalities": ["text"],
        "source": "https://ai.google.dev/gemini-api/docs/pricing#gemini-2.5-pro"
    }
}
```

not all objects contain all of the keys listed here.

there will be many models in the source data and they should all be converted.

and it should be converted to look like:

```json
{
    "google/gemini-2.5-pro": {
        "max_tokens": 65536,
        "max_input_tokens": 1048576,
        "input_cost_per_token": 0.00000125,
        "input_cost_per_token_above_200k_tokens": 0.0000025,
        "output_cost_per_token": 0.00001,
        "output_cost_per_token_above_200k_tokens": 0.000015,
        "source": "https://ai.google.dev/gemini-api/docs/pricing#gemini-2.5-pro"
    }
}
```

in general, the JSON parsing is extremely permissive to well formedness issues.

the following data should also be added:

```json
    "anthropic/claude-sonnet-4-20250514": {
        "input_cost_per_token": 3e-06,
        "max_input_tokens": 200000,
        "max_tokens": 8192,
        "output_cost_per_token": 1.5e-05
    },
```

the resulting data should be written to ./res/pricing.json
